
What is laravel?
		Laravel is a PHP web framework that uses the MVC architecture.

MVC - Model View Controller

	Models:		Deals with database
	View:		Deals with the HTML
	Controller:	The middle-man


Serve site:
	command: php artisan serve


Routes
	Routes are located inside \app\http\routes.php

		Routes Examples: -> 1st Parameter is the route, 2nd param is the behavior function	
			Route::get('/', function(){
				return view('NameOfTheView');
			})

		Passing variables: Variables received in the url need to be passed to the function
			Route::get('/posts/{id}/{name}', function($id, $name){
				return "The id value is: ". $id . " and my name is ". $name;
			})

		Nick-naming a route:
		 	Route::get('/admin/posts/example', array('as' => 'admin.home', function(){

		 		$url = route('admin.home'); //passing hole url with route helper function
		 		return "this url is ". $url;

		 	}));

		 Routing to a controller method: 
		 	// id is going to be passed to method function
		 	Route::get('/post/{id}', 'ControllerName@method')

		 Creating named routes:
		 	Route:resource('posts', 'ControllerName');
		 	/*
		 	 |	This will create on "php artisan route:list" the CRUD routes for the different HTTP methods (DELETE, UPDATE, GET, etc)
		 	 |		
		 	 |		--------------------------------------------
		 	 |		METHOD 			URI				Name 		
		 	 |		--------------------------------------------
		 	 |		GET|HEAD		posts			posts.index
		 	 |		POST 			posts 			posts.store
		 	 |		GET|HEAD 		posts/create 	posts.create
		 	 |		DELETE 			posts/{posts}	posts.destroy
		 	 |		PUT|PATCH 		posts/{posts} 	posts.update
		 	 |		GET|HEAD 		posts/{posts} 	posts.show
		 	 |		GET|HEAD 		posts/{posts} 	posts.edit
		 	 |
		 	 */
		 	
	Commands:  
		php artisan route:list 	//Shows the list of routes in the project


Controllers
	Controllers are located in \app\Http\Controllers
	Always use CamelCase convention

	Commads: 
		//Creates a controller
		php artisan make:controller ControllerName

		//Creates controller as resource with CRUD functions
		php artisan make:controller --resource ControllerName	


Views
	Views are located in \resources\views\ files need to extention ".blade.php"

	Passing data to views:

		There are multiple ways of passing data to a view. Variable need to be used in the view as {{$variable}}

		Examples:

			return view('contact')->with('variable',$variable);

			For passing multiple parameters
				public function show_my_view($id, $name, $lastName){

					return view('contact', compact('id', 'name', 'lastName'))
				}

			    return view('contact', [
		            'firstName' => 'Carlos',
		            'lastName' => 'Garcia',
		            'age' => '30'
		        ]);

Using Blade
	 /* Popular convention: To create a Master Page named \resources\views\layouts\app.blade.php */

	 @extends('layout.app') -> Includes the layout in the view
	 
	 @yield('view_name') -> Is a section to be replaced with another content inside a view that extended the layout

	 @section('section_name') the name of the section where your code is going to be placed. It has to end with
	 @stop or @endsection

	 	Usage: 
	 			1. Layout name "app.blade.php" has a @yield named 'content'. 
	 			2. View has to @extends('app') to include the layout.
	 			3. The content inside the @section('content') will be placed inside the @yield of the layout

Configuration
	App configuration is stored in the .env file at root path.


Migrations
	Is a Laravel feature used to create tables in a Database.

	Class used functions:
		- increments('column_name') => Creates the column with an increment
		- timestamps() creates columns "Created At" and "Updated at"

	Code example:
		Schema::create('posts', function (Blueprint $table){
			$table->increments('id');
			$table->string('title');
			$table->text('body');
			$table->timestamps();
		});

	Console Command: For creating a migration. 
	
	!!!NOTE!!! - ALWAYS FOLLOW LARAVEL CONVETION, ALL LOWERCASE WORDS SEPARATED BY UNDERSCORE (_) EX: create_posts_table
		Creating Migration:	
			php artisan make:migration create_posts_table --create="posts" 		=> The flag "create" contains the name of the table.

		Running migration:
			php artisan migrate

		Rolling back migration (last one):
			php artisan migrate:rollback
		Rolling back everything:
			php artisan migrate:reset
		
		Adding column to existing table:
			php artisan make:migration add_is_column_to_posts_table --table="posts"  => The flag 'table' needs the value of the table is going to be altered.

		Rolling back and re-migrating:
			php artisan migrate:refresh => Rollsback all migrations and re-run them
		
		Checking migration status:
			php artisan migrate:status => Shows the status of the migrations, the ones run and the ones that are pending.

Raw SQL Queries
	There are two ways of executing CRUD commands in Laravel, one is raw coding the queries and the other is by using Eloquent Models.

	HardCoding Ex:
		Route::get('/insert', function(){

			DB::insert('insert into posts(title, content) values(?, ?)', ['PHP with Laravel', 'Laravel is the best thing that has happened']);

		});
	
		Route::get('/read', function(){

			$results = DB::select('select * from posts where id = ? ', [1]);

			forreach($results as $post){
				return $post->title;
			}
		});

		Route::get('/update', function(){

			$updated = DB::update('update posts set title = "Updated title" where id = ?', [1]);

			return $updated;
		});
		
		Route::get('/delete', function(){
			$deleted = DB:delete('delete from posts where id = ?', [1]);
			return $deleted;
		});

Models and Eloquent
	Models create are located in \app. To create a model via artisan console write: 
		
		php artisan make:model ModelName -m
		/*
		 |	If you flag it with '-m' a migration will be created also the Model name should be with Caps,
		 |	Laravel by convention will look for a table named like the model in lowecase and plural
		 |	Ex:
		 |		If the name of the model is 'Post', the name of the table should be 'posts'
		 |
		 |	
		 */

		 If you want to change the default or convention values for the Model you need to change the $table and the $primaryKey variables

		 Ex:

			 class Post extends Model {

				 protected $table = 'my_tabel';
				 protected $primaryKey = 'my_id';
			 }

	For retrieving data with where and chaining statements.
		$posts = Post::where('id', 1)->orderBy('id', 'desc')->take(1)->get();
		$posts = Post::where('user_count', '<', 50)->firstOrFail();


	Inserting data
		Ex:
			$post = new Post;
			$post->title = "Eloquent ORM";
			$post->content = "This is an insert from Eloquent";
			$post->author = "Anonymous";
			$post->categories = "Programming";
			$post->save();

			/* After setting the values save() method needs to be run to save the data*/

	Updating data:
		Ex:
			$post = Post::find(1);
        	$post->title = $new_title;
        	$post->save();

		Beside this we can update date using the update() method as below:

			Post::where('id', 2)->where('is_admin', 0)->update(['title'=>'NEW PHP TITLE', 'content'=>'NEW PHP CONTENT']);
	
	Creating data:
		!!!NOTE!!! - update() AND create() METHODS MODIFY THE CREATED_AT AND UPDATE_AD ROWS AUTOMATICALY, save() METHOD DOES NOT
		
		The create method is used to mass assign values. By default this create function is disabled and you need to specify in the model the columns that are
		safe to insert via this method.

		To do this add the following to the Model:
			
			/* 
			 |	In the following model it is safe to use create on columns 'title' and 'content'
			*/
			class Post extends Model{

					protected $fillable = ['title', 'content'];
			}

		Calling the create after enabling it on the Model.

			Post::create(['title'=>'This is a new title', 'content'=>'This is a new content']);

	Deleting data:
		Call method delete() or destroy().
		
		Ex:
			Post::where('is_admin', 0)->where('category', 'Programming')->delete();
			
			/*
			 |	Destroy receives the id as parameter, it can also receive and array of ids
			 */
			Post::destroy(id);
			Post::destroy([4,5]); 

	Soft delete:
		When we SoftDelete in Laravel, the affected row is not removed completely from the database, a delete_at column is going to track
		the date when this row was soft deleted. If a row has been soft deleted (will have a date on deleted_at column), it wont be queried by 
		Laravel Model. This means that when we use the Post::all(), select() or any other method, this row will not be returned.

		In order to Soft Delete rows, first we need to import the Eloquent SoftDelete method.
			use Illuminate\Database\Eloquent\SoftDeletes;
		
		We also need to use it in the Model and set the column in the protected variable.

			class Post extendes Model{
				use SoftDeletes;

				protected $dates = ['deleted_at'];
			}
		
		This needs to be added to the migration, either as an added column on in the create table migration. Once we do this, every time we run the delete() method
		rows affected will be soft deleted.

	Retrieving deleted items (SoftDeletes)
		In order to select items that where soft deleted we need to use method withTrashed() and onlyTrashed(). As the their respective names describe their behavior, the 
		withTrashed() method will include in the query all rows no matter if they were previously trashed. Method onlyTrashed() will only return the methods trashed. Keep in mind
		that what determinates if a row was soft deleted or not is a timestamp in the "delete_at" row.

		Ex:

			$post = Post::withTrashed()->get();
    		return $post;

			$post = Post::onlyTrashed()->get();
    		return $post;

	Restoring soft deleted items
		For restoring an item you just need to add the restore() method at the end of the query for it to be restored.

		Ex:
			$post = Post::withTrashed()->where('id', 1)->restore();

	Remove permanently items
		For permanently delete an item you just need to add the forceDelete() method at the end of the query for it to be permanently removed.

		Ex:
			$post = Post::withTrashed()->where('id', 1)->forceDelete();

	
	One to One Relationship
		In the one to one relation you need to specify in the Model the type of relation it has with another Model.

		Ex: 	
			/*
			 | Inside User Model class
			*/

			public function post(){

				/* <-- NOTE - BY DEFAULT THIS IS GOING TO LOOK FOR THE "user_id" COLUMN IN THE "Post" TABLE. 
					THIS IS BECAUSE THE NAME OF THE MODEL THAT HAS THE 	RELATION IN NAMED user, SO LARAVEL 
						ADDS THE "_id" BY DEFAULT --> */

				return $this->hasOne('App\Post');
			}

			The "hasOne()" function takes as a second parameter the name of the column on the other table that identifies the relation.

				Ex: $this->hasOne('App\Post', 'the_user_id');
		
			If you you dont have an "id" column you need to specify this in the hasOne() function as Laravel will look for it by default.
				Ex: $this->hasOne('App\Post', 'the_user_id', 'id_field');

			Always import the models in order to use them.
			
			Ex:
				/* 
				 |	Post is an object so the columns can be accessed like: 
				 |		User::find($id)->post->title 
				 */
				Route::get('/user/{id}/posts', function($id){

					return User::find($id)->post;
				});

		To do the Inverse relation we use the belongsTo() function in Model affected.

	One to Many Relation:
		The principle is the same af the one above (One to One) but intead of using the hasOne() function we use the hasMany() function.
	
	Many to Many relation:
		To have a many to many relationship we need to use a pivot table that will have the id of both tables we are relating. For instance, if we want to have 
		a many to many relation between a Users table and Roles table, we need a pivot table that will have 'user_id' and 'role_id', this table will contain the
		relation between these two table. By Laravel convetion the name of the pivot table is the conjuction of both original tables (in sigular) and ordered 
		alphabetically and separated by an underscore '_'. Ex: Pivot table between 'users' and 'roles' table should be name 'role_user'.

		To complete each relation we need to use the "belongsToMany()" in each principal table MODEL. Note that the pivot table doesnt have a Model class. 
		
		The parameters for the belongsToMany('Model', 'pivot_table', 'foreing_key_1','foreing_key_2');
			
			Ex: belongsToMany('App\User', 'user_roles', 'user_id', 'role_id');

	For accessing the pivot table:

		public function roles(){

				return $this->belongsToMany('App\User')->withPivot('created_at');
		}

		$users = find($id);

		foreach($users->roles as $role){
			echo $role->pivot->created_at;
		}

	Has Many Through
		In this type of relation we connect 2 tables with an intermediate table which is not a pivot table like the many to many relationship. For intance,
		we have a country table that has many users (country_id caloumn will be in the users table), and a users table that has many posts (user_id column will
		be in the posts table). In order for us to get the posts from the Country Model we need a hasManyThrough() function.

			hasManyThrough('target_table', 'middle_table', 'middle_table_relation_id', 'target_table_relation_id');

			NOTE: IF YOU FOLLOW LARAVEL'S CONVENTION ON THE NAME ID'S THE SPECIFICATION OF THE IDS ON THE FUNCTION CALL WONT BE NECESSARY.

			target_table: this is the table you are trying to get info from.
			middle_table: this is the table that you are using to connect to the target table
			middle_table_relation_id: this is the column id that relates origin table and middle table
			target_table_relation_id: this is the column id that relates the middle table and the target table
		
		Use:

			public function posts(){
				return $this->hasManyThrough('App\Post', 'App\Users', 'country_id', 'user_id' );
			}
		
	Polymorphic Relationship
		Polymorphic relationships lets you relate a table with many different ones. Basically, the table will have two columns that will handle the
		relation it has with other tables. A use case of this polymorphic relation is a comments table. Lets say you have a videos table and a posts table,
		and in both of those you are able to comment, meaning that posts and videos are related to comments. In this example instead of having a comments table
		for each one (posts and videos), we share the comments table with both by making it polymorphic.

		A polymorphic tables need 2 important columns "commentable_id" and "commentable_type". the "commentable_id" will contain the ID value of the post or video, 
		the "commentable_type" will contain the class name of the owning model ('App\Post' or 'App\Video').

		So the comments table will look like this:

			comments
			----------
			id - integer
			body - string
			commentable_id - integer
			commentable_type - string

		Once this is done we need to create in the Model a function called "commentable" in this example thats the name we need to use as per convention we use 
		the same name plus 'id' and 'type' for the columns. That class needs to return morphTo() method.

			class Comment extends Model {

				public function commentable() {
					return $this->morphTo();
				}
			}
		
		After this, the models that this model morphs to needs to use the morphMany() function to return the rows that belong the model type as well as the function
		that performs the morphTo() method.

			class Post {
				public function comments() {
					return $this->morphMany('App\Comment', 'commentable');
				}
			}
		
			class Video {
				public function comments() {
					return $this->morphMany('App\Comment', 'commentable');
				}
			}